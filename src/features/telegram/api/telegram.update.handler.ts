import { Injectable, OnModuleInit, UseGuards } from '@nestjs/common';
import { CreateUserTelegramDto } from '../domain/dto/user.telegram.domain.dto';
import { CommandBus } from '@nestjs/cqrs';
import { UserRegisterViaTelegramCommand } from '../application/useCases/user-register-via-telegram.use-case';
import { telegramHandleActionResult } from '../application/telegram-action-result.handler';
import { Command, Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { TelegramAuthGuard } from '../guards/telegram-auth.guard';
import { CreateCardDto } from '../../cards/domain/dto/cards.dto';
import { newCardParser } from '../utils/newCardParser';
import { UserCreateCardCommand } from '../../cards/application/use.cases/create-card.use-case';
import { CardsRepository } from '../../cards/infrastructure/cards.repository';
import { UsersRepository } from '../../users/infrastructure/users.repository';

@Update()
export class TelegramUpdateHandler implements OnModuleInit {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly commandBus: CommandBus,
    private readonly cardsRepository: CardsRepository,
    private readonly usersRepository: UsersRepository,
  ) {}

  async onModuleInit() {
    console.log('‚úÖ Telegram bot is ready (handler initialized)');
    const users = await this.usersRepository.getAllTelegramUsers();

    for (const user of users) {
      await this.bot.telegram.sendMessage(
        +user.telegramId,
        'üì° –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã',
      );
    }
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ');
  }

  @Command('register')
  async onRegister(@Ctx() ctx: Context) {
    const { id, username, is_bot } = ctx.from!;

    if (is_bot) {
      await ctx.reply(`–°–æ—Ä—è–Ω, –±–æ—Ç–∞–º –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω`);
      return;
    }

    const dto: CreateUserTelegramDto = {
      telegramId: id.toString(),
      userName: username || id.toString(),
    };

    const result = await this.commandBus.execute(
      new UserRegisterViaTelegramCommand(dto),
    );

    const isHandled = await telegramHandleActionResult(result, ctx);
    if (!isHandled) return;

    await ctx.reply(
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ ${username} c –∞–π–¥–∏—à–∫–æ–π ${result}`,
    );
  }

  @Command('read')
  @UseGuards(TelegramAuthGuard)
  async getRandomCard(@Ctx() ctx: Context) {
    const card = await this.cardsRepository.getRandomCardByUser(
      ctx.state.userId,
    );
    if (!card) {
      await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    await ctx.reply(`${card.text}`);
  }

  @Command('new')
  @UseGuards(TelegramAuthGuard)
  async onMakeCard(@Ctx() ctx: Context) {
    if (!('text' in ctx.message)) {
      await ctx.reply(
        '‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º.',
      );
      return;
    }
    const massage = ctx.message?.text || null;
    const parsed = newCardParser(massage);

    if (!parsed) {
      await ctx.reply(
        '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞–∫:\n/new # –∫–∞—Ç–µ–≥–æ—Ä–∏—è # –∑–∞–≥–æ–ª–æ–≤–æ–∫ # —Ç–µ–∫—Å—Ç',
      );
      return;
    }

    const dto: CreateCardDto = {
      userId: ctx.state.userId,
      category: parsed.category,
      title: parsed.title,
      text: parsed.text,
    };

    try {
      const cardTitle = await this.commandBus.execute(
        new UserCreateCardCommand(dto),
      );

      await ctx.reply(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ "${cardTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @On('text')
  async onText(@Ctx() ctx: Context) {
    const from = ctx.from!;
    const message = ctx.message;

    if ('text' in message) {
      await ctx.reply(`–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${message.text}, –æ—Ç ${from.username}`);
    } else {
      await ctx.reply(`–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ ü§î`);
    }
  }
}
