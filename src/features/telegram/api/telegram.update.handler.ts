import {
  OnApplicationBootstrap,
  OnModuleInit,
  UseGuards,
} from '@nestjs/common';
import { CreateUserTelegramDto } from '../domain/dto/user.telegram.domain.dto';
import { CommandBus } from '@nestjs/cqrs';
import { UserRegisterViaTelegramCommand } from '../application/useCases/user-register-via-telegram.use-case';
import { telegramHandleActionResult } from '../application/telegram-action-result.handler';
import { Command, Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { TelegramAuthGuard } from '../guards/telegram-auth.guard';
import { CreateCardDto } from '../../cards/domain/dto/cards.dto';
import { newCardParser } from '../utils/newCardParser';
import { UserCreateCardCommand } from '../../cards/application/use.cases/create-card.use-case';
import { RenewRemainderListCommand } from '../../cards/application/use.cases/renew-card-list.use-case';
import { GetCardFromListCommand } from '../../cards/application/use.cases/get-card-from-list.use-case';
import { UpdateUserTimeZoneCommand } from '../../users/application/useCases/update-user-time-zone.use-case';
import { SendCardToAllUsersCommand } from '../application/useCases/send-random-card-to-all-users.use-case';

@Update()
export class TelegramUpdateHandler implements OnApplicationBootstrap {
  constructor(private readonly commandBus: CommandBus) {}

  async onApplicationBootstrap() {
    console.log('‚úÖ Telegram bot is ready (app fully bootstrapped)');
    await this.commandBus.execute(new SendCardToAllUsersCommand(true));
  }

  @Start()
  async onStart(@Ctx() ctx: Context) {
    await ctx.reply(
      `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫.

üìù –¢—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏, –∏ —è –±—É–¥—É –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö —Ç–µ–±–µ ‚Äî –ª–∏–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ª–∏–±–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

‚öôÔ∏è –ù–æ —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /register, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –∫–∞–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∏–º–µ–Ω–Ω–æ –∫ —Ç–µ–±–µ.

‚ÑπÔ∏è –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é /help.

‚ö†Ô∏è –í–∞–∂–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –∏ –∑–∞—Å—ã–ø–∞–µ—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è (–∏ —è –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º üí§).

ü§î –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–ø–ª—é –ª–∏ —è? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é ‚Äî –∑–Ω–∞—á–∏—Ç, —è —Å–ø–ª—é.

üîó –Ø –ø—Ä–æ—Å—ã–ø–∞—é—Å—å –∫–∞–∂–¥—ã–π —á–∞—Å, –Ω–æ —á—Ç–æ–±—ã —Ä–∞–∑–±—É–¥–∏—Ç—å –º–µ–Ω—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: ${'https://telegram-memory-cards.onrender.com'}
–Ø –ø—Ä–æ—Å–Ω—É—Å—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥! üòä.

üï∞Ô∏è –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã —É–∫–∞–∂–µ—à—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å,
—è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –ü–†–ò–ú–ï–†–ù–û –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ ‚Äî —Å 8 —É—Ç—Ä–∞ –¥–æ 9 –≤–µ—á–µ—Ä–∞. üòä`,
    );
  }

  @Command('help')
  async onHelp(@Ctx() ctx: Context) {
    await ctx.reply(
      `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìù /register ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–µ–±—è –≤ —Å–∏—Å—Ç–µ–º–µ.

üåç /settimezone ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.  
–ë–µ–∑ —ç—Ç–æ–≥–æ —è –Ω–µ –±—É–¥—É —Å–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–±—É–¥–∏—Ç—å —Ç–µ–±—è –Ω–æ—á—å—é.  
–ù–∞–ø—Ä–∏–º–µ—Ä, "/settimezone +3" —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö.

üÜï /new ‚Äî —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.  
–§–æ—Ä–º–∞—Ç: \`/new # –∫–∞—Ç–µ–≥–æ—Ä–∏—è # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ # —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏\`

üìñ /read ‚Äî –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ —Ç–≤–æ–µ–π –∫–æ–ª–æ–¥—ã.

üîÄ /mixcards ‚Äî –ø–µ—Ä–µ—Ç–∞—Å—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å—ë –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
  `,
      {
        parse_mode: 'Markdown',
      },
    );
  }

  @Command('register')
  async onRegister(@Ctx() ctx: Context) {
    const { id, username, is_bot } = ctx.from!;

    if (is_bot) {
      await ctx.reply(`–°–æ—Ä—è–Ω, –±–æ—Ç–∞–º –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω`);
      return;
    }

    const dto: CreateUserTelegramDto = {
      telegramId: id.toString(),
      userName: username ? username : id.toString(),
    };

    const result = await this.commandBus.execute(
      new UserRegisterViaTelegramCommand(dto),
    );

    const isHandled = await telegramHandleActionResult(result, ctx);
    if (!isHandled) return;

    await ctx.reply(
      `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ ${username} c –∞–π–¥–∏—à–∫–æ–π ${result}`,
    );
  }

  @UseGuards(TelegramAuthGuard)
  @Command('settimezone')
  async setTimeZone(@Ctx() ctx: Context) {
    if (!('text' in ctx.message)) {
      await ctx.reply(
        '‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.',
      );
      return;
    }

    const messageText = ctx.message.text.trim();
    const parts = messageText.split(/\s+/);

    if (parts.length < 2) {
      await ctx.reply('‚ÑπÔ∏è –£–∫–∞–∂–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settimezone 6');
      return;
    }

    const timeZoneStr = parts[1];
    const timeZone = Number(timeZoneStr);

    if (!Number.isInteger(timeZone) || timeZone < -12 || timeZone > 14) {
      await ctx.reply(
        `ü§î –¢–æ –µ—Å—Ç—å —Ç—ã –∂–∏–≤—ë—à—å –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ ${timeZoneStr}? –û—á–µ–Ω—å —Å–º–µ—à–Ω–æ.`,
      );
      return;
    }

    const userId = ctx.state.user._id;
    const result = await this.commandBus.execute(
      new UpdateUserTimeZoneCommand(userId, timeZone),
    );
    const isHandled = await telegramHandleActionResult(result, ctx);
    if (!isHandled) return;

    await ctx.reply(`‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${timeZone}`);
  }

  @Command('read')
  @UseGuards(TelegramAuthGuard)
  async getRandomCard(@Ctx() ctx: Context) {
    const result = await this.commandBus.execute(
      new GetCardFromListCommand(ctx.state.userId),
    );

    const isHandled = await telegramHandleActionResult(result, ctx);
    if (!isHandled) return;

    await ctx.reply(`${result.text}`);
  }

  @Command('new')
  @UseGuards(TelegramAuthGuard)
  async onMakeCard(@Ctx() ctx: Context) {
    if (!('text' in ctx.message)) {
      await ctx.reply(
        '‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º.',
      );
      return;
    }
    const massage = ctx.message?.text || null;
    const parsed = newCardParser(massage);

    if (!parsed) {
      await ctx.reply(
        '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∞–∫:\n/new # –∫–∞—Ç–µ–≥–æ—Ä–∏—è # –∑–∞–≥–æ–ª–æ–≤–æ–∫ # —Ç–µ–∫—Å—Ç',
      );
      return;
    }

    const dto: CreateCardDto = {
      userId: ctx.state.userId,
      category: parsed.category,
      title: parsed.title,
      text: parsed.text,
    };

    try {
      const cardTitle = await this.commandBus.execute(
        new UserCreateCardCommand(dto),
      );

      await ctx.reply(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ "${cardTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  @UseGuards(TelegramAuthGuard)
  @Command('mixcards')
  async mixCardList(@Ctx() ctx: Context) {
    await this.commandBus.execute(
      new RenewRemainderListCommand(ctx.state.userId),
    );
    await ctx.reply('–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –≤–Ω–æ–≤—å');
  }

  @On('text')
  async onText(@Ctx() ctx: Context) {
    const from = ctx.from!;
    const message = ctx.message;

    if ('text' in message) {
      await ctx.reply(`–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${message.text}, –æ—Ç ${from.username}`);
    } else {
      await ctx.reply(`–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ ü§î`);
    }
  }
}
